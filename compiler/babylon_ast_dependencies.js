"use strict";
const lodash_1 = require('lodash');
const babel_traverse_1 = require('babel-traverse');
const types = require('babel-types');
const common_1 = require('../common');
/**
 * Given an AST generated by babylon, returns an object describing
 * the imports, exports and any errors encountered.
 */
function babylonAstDependencies(ast, options) {
    const outcome = {
        identifiers: []
    };
    let checkForRequires = true;
    let checkForImports = true;
    let checkForExports = true;
    if (options && options.text) {
        const text = options.text;
        checkForRequires = text.indexOf('require') !== -1;
        checkForImports = text.indexOf('import') !== -1;
        checkForExports = text.indexOf('export') !== -1;
        if (!checkForRequires && !checkForImports && !checkForExports) {
            return outcome;
        }
    }
    const visitor = {};
    if (checkForRequires) {
        visitor.CallExpression = (node) => handlePossibleRequireCallExpression(outcome, node);
    }
    if (checkForImports) {
        visitor.ImportDeclaration = (node) => handleImportDeclaration(outcome, node);
    }
    if (checkForExports) {
        visitor.ExportDeclaration = (node) => handleExportDeclaration(outcome, node);
    }
    babel_traverse_1.default(ast, visitor);
    outcome.identifiers = lodash_1.uniq(outcome.identifiers);
    return outcome;
}
exports.babylonAstDependencies = babylonAstDependencies;
function handleImportDeclaration(outcome, node) {
    node = node.node;
    // `import ... from '...';
    outcome.identifiers.push(node.source.value);
}
function handleExportDeclaration(outcome, node) {
    node = node.node;
    // `export ... from '...';
    if (node.source) {
        outcome.identifiers.push(node.source.value);
    }
}
function handlePossibleRequireCallExpression(outcome, node) {
    node = node.node;
    // `require('...');
    if (node.callee.name === 'require') {
        const arg = node.arguments[0];
        if (types.isLiteral(arg)) {
            const identifier = arg.value;
            outcome.identifiers.push(identifier);
            return;
        }
        else {
            if (!arg.loc || !arg.loc.start) {
                throw new Error('Require expression cannot be statically analyzed');
            }
            else {
                const err = new common_1.CodeError(`require(...) expression at line ${arg.loc.start.line}, column ${arg.loc.start.column} ` +
                    'cannot be statically analyzed');
                // Enable errors to be mapped against the text's content
                err.loc = {
                    line: arg.loc.start.line,
                    column: arg.loc.start.column
                };
                throw err;
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFieWxvbl9hc3RfZGVwZW5kZW5jaWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmFieWxvbl9hc3RfZGVwZW5kZW5jaWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSx5QkFBK0IsUUFBUSxDQUFDLENBQUE7QUFDeEMsaUNBQXFCLGdCQUFnQixDQUFDLENBQUE7QUFDdEMsTUFBWSxLQUFLLFdBQU0sYUFBYSxDQUFDLENBQUE7QUFDckMseUJBQTBCLFdBQVcsQ0FBQyxDQUFBO0FBRXRDOzs7R0FHRztBQUNILGdDQUF1QyxHQUFRLEVBQUUsT0FBeUI7SUFDeEUsTUFBTSxPQUFPLEdBQUc7UUFDZCxXQUFXLEVBQUUsRUFBRTtLQUNoQixDQUFDO0lBRUYsSUFBSSxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7SUFDNUIsSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDO0lBQzNCLElBQUksZUFBZSxHQUFHLElBQUksQ0FBQztJQUMzQixFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDNUIsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUMxQixnQkFBZ0IsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2xELGVBQWUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2hELGVBQWUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2hELEVBQUUsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1lBQzlELE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDakIsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLE9BQU8sR0FBUSxFQUFFLENBQUM7SUFD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