"use strict";
const imm = require('immutable');
const ava_1 = require('ava');
const utils_1 = require('../utils');
ava_1.default('createNodesFromNotation createNodesFromNotation should create a single node', (t) => {
    t.truthy(imm.is(utils_1.createNodesFromNotation('a'), utils_1.objectToGraph({ a: { id: 'a' } })));
});
ava_1.default('createNodesFromNotation should create two nodes with an edge', (t) => {
    t.truthy(imm.is(utils_1.createNodesFromNotation('a -> b'), utils_1.objectToGraph({
        a: { id: 'a', dependencies: ['b'] },
        b: { id: 'b', dependents: ['a'] }
    })));
});
ava_1.default('createNodesFromNotation should create three nodes with two edges', (t) => {
    t.truthy(imm.is(utils_1.createNodesFromNotation('a -> b -> c'), utils_1.objectToGraph({
        a: ({ id: 'a', dependencies: ['b'] }),
        b: { id: 'b', dependents: ['a'], dependencies: ['c'] },
        c: { id: 'c', dependents: ['b'] }
    })));
});
ava_1.default('createNodesFromNotation should handle multiple lines', (t) => {
    t.truthy(imm.is(utils_1.createNodesFromNotation(`
      a -> b
      b -> c
      c -> a
    `), utils_1.objectToGraph({
        a: { id: 'a', dependents: ['c'], dependencies: ['b'] },
        b: { id: 'b', dependents: ['a'], dependencies: ['c'] },
        c: { id: 'c', dependents: ['b'], dependencies: ['a'] }
    })));
});
ava_1.default('createNodesFromNotation should handle multiple empty lines', (t) => {
    t.truthy(imm.is(utils_1.createNodesFromNotation(`
      a -> b


      b -> a
    `), utils_1.objectToGraph({
        a: { id: 'a', dependents: ['b'], dependencies: ['b'] },
        b: { id: 'b', dependents: ['a'], dependencies: ['a'] }
    })));
});
ava_1.default('createNodesFromNotation should handle circular definitions 1', (t) => {
    t.truthy(imm.is(utils_1.createNodesFromNotation(`
      a -> b -> a
    `), utils_1.objectToGraph({
        a: { id: 'a', dependents: ['b'], dependencies: ['b'] },
        b: { id: 'b', dependents: ['a'], dependencies: ['a'] }
    })));
});
ava_1.default('createNodesFromNotation should handle circular definitions 2', (t) => {
    t.truthy(imm.is(utils_1.createNodesFromNotation(`
      a -> b
      b -> c
      c -> b
    `), utils_1.objectToGraph({
        a: { id: 'a', dependencies: ['b'] },
        b: { id: 'b', dependents: ['a', 'c'], dependencies: ['c'] },
        c: { id: 'c', dependents: ['b'], dependencies: ['b'] }
    })));
});
ava_1.default('createNodesFromNotation should handle circular definitions 2', (t) => {
    t.truthy(imm.is(utils_1.createNodesFromNotation(`
      a -> b -> c -> b
    `), utils_1.objectToGraph({
        a: { id: 'a', dependencies: ['b'] },
        b: { id: 'b', dependents: ['a', 'c'], dependencies: ['c'] },
        c: { id: 'c', dependents: ['b'], dependencies: ['b'] }
    })));
});
ava_1.default('objectToGraph should build the expected graph structure', (t) => {
    const input = {
        a: { id: 'a' },
        b: { id: 'b', dependents: ['a', 'c'], dependencies: ['c'] },
        c: { id: 'c', dependencies: ['b'] }
    };
    const computed = utils_1.objectToGraph(input).toJS();
    const expected = {
        a: { id: 'a', dependents: [], dependencies: [] },
        b: { id: 'b', dependents: ['a', 'c'], dependencies: ['c'] },
        c: { id: 'c', dependents: [], dependencies: ['b'] }
    };
    t.deepEqual(expected, computed);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdF91dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3RfdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQVksR0FBRyxXQUFNLFdBQVcsQ0FBQyxDQUFBO0FBQ2pDLHNCQUFpQixLQUFLLENBQUMsQ0FBQTtBQUN2Qix3QkFBcUQsVUFBVSxDQUFDLENBQUE7QUFFaEUsYUFBSSxDQUFDLDZFQUE2RSxFQUFFLENBQUMsQ0FBQztJQUNwRixDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQ2IsK0JBQXVCLENBQUMsR0FBRyxDQUFDLEVBQzVCLHFCQUFhLENBQUMsRUFBQyxDQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFDLEVBQUMsQ0FBQyxDQUM5QixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILGFBQUksQ0FBQyw4REFBOEQsRUFBRSxDQUFDLENBQUM7SUFDckUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUNiLCtCQUF1QixDQUFDLFFBQVEsQ0FBQyxFQUNqQyxxQkFBYSxDQUFDO1FBQ1osQ0FBQyxFQUFFLEVBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBQztRQUNqQyxDQUFDLEVBQUUsRUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFDO0tBQ2hDLENBQUMsQ0FDSCxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILGFBQUksQ0FBQyxrRUFBa0UsRUFBRSxDQUFDLENBQUM7SUFDekUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUNiLCtCQUF1QixDQUFDLGFBQWEsQ0FBQyxFQUN0QyxxQkFBYSxDQUFDO1FBQ1osQ0FBQyxFQUFFLENBQUMsRUFBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRSxDQUFDLEdBQUcs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