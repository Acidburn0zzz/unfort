"use strict";
const imm = require('immutable');
const ava_1 = require('ava');
const graph_1 = require('../graph');
const utils_1 = require('../utils');
ava_1.default.cb('.start should emit during the first trace call', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(() => Promise.resolve([]));
    graph.trace('test');
    graph.start.subscribe(name => {
        t.is(name, 'test');
        t.end();
    });
});
ava_1.default.cb('.start should emit only once per run', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(() => Promise.resolve([]));
    graph.error.subscribe(obj => {
        throw obj.error;
    });
    let called = 0;
    graph.start.subscribe(() => {
        called++;
    });
    graph.trace('a');
    graph.trace('b');
    graph.trace('c');
    const subscription = graph.complete.subscribe(() => {
        subscription.unsubscribe();
        graph.trace('a');
        graph.trace('b');
        graph.trace('c');
        graph.complete.subscribe(() => {
            t.is(called, 2);
            t.end();
        });
    });
});
ava_1.default.cb('.complete should emit once all tracing has completed', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(() => Promise.resolve([]));
    graph.addEntryPoint('test');
    graph.traceFromEntryPoints();
    graph.complete.subscribe(({ nodes, pruned }) => {
        t.truthy(nodes instanceof imm.Map);
        t.truthy(nodes.has('test'));
        t.truthy(pruned instanceof imm.List);
        t.end();
    });
});
ava_1.default.cb('.error should emit if the resolver rejects', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(() => Promise.reject(new Error('expected error')));
    graph.trace('test');
    graph.error.subscribe(({ error, fileName }) => {
        t.is(error.message, 'expected error');
        t.is(fileName, 'test');
        t.end();
    });
});
ava_1.default.cb('.error should emit if the resolver throws', (t) => {
    let err;
    const graph = new graph_1.CyclicDependencyGraph(() => {
        err = new Error('expected error');
        throw err;
    });
    graph.trace('test');
    graph.error.subscribe(({ error, fileName }) => {
        t.is(error, err);
        t.is(error.message, 'expected error');
        t.is(fileName, 'test');
        t.end();
    });
});
ava_1.default.cb('.trace should call the provided resolve function', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(name => {
        t.is(name, 'test');
        t.end();
    });
    graph.trace('test');
});
ava_1.default('.trace should create pending jobs for the node', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(() => { });
    graph.trace('test');
    t.truthy(graph._pendingJobs[0] instanceof Object);
    t.is(graph._pendingJobs[0].name, 'test');
    t.truthy(graph._pendingJobs[0].isValid);
});
ava_1.default.cb('.trace should signal once all the dependencies have been resolved', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(() => Promise.resolve([]));
    graph.complete.subscribe(() => {
        t.end();
    });
    graph.trace('test');
});
ava_1.default.cb('.trace should populate the graph with the provided dependencies', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(resolver);
    graph.addEntryPoint('a');
    graph.traceFromEntryPoints();
    function resolver(file) {
        if (file === 'a') {
            return Promise.resolve(['b', 'c']);
        }
        else {
            return Promise.resolve([]);
        }
    }
    graph.complete.subscribe(({ nodes }) => {
        t.truthy(nodes.has('a'));
        t.truthy(nodes.has('b'));
        t.truthy(nodes.has('c'));
        t.end();
    });
});
ava_1.default('.trace should invalidate any pending jobs for the node', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(() => { });
    const job = { name: 'test', isValid: true };
    graph._pendingJobs.push(job);
    graph.trace('test');
    t.falsy(job.isValid);
});
ava_1.default('.prune should remove nodes', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(() => { }, {
        initialState: utils_1.createNodesFromNotation('a')
    });
    t.true(graph.nodes.has('a'));
    graph.prune('a');
    t.false(graph.nodes.has('a'));
});
ava_1.default('.prune should track removed nodes', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(() => { }, {
        initialState: utils_1.createNodesFromNotation('a')
    });
    graph.prune('a');
    t.deepEqual(Array.from(graph._prunedNodes), ['a']);
});
ava_1.default('.prune should not prune dependencies without dependents', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(() => { }, {
        initialState: utils_1.createNodesFromNotation('a -> b')
    });
    graph.prune('a');
    t.deepEqual(Array.from(graph._prunedNodes), ['a']);
});
ava_1.default('.prune should invalidate any pending jobs related to the pruned nodes', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(() => { });
    const job = { name: 'a', isValid: true };
    graph._pendingJobs.push(job);
    graph.prune('a');
    t.is(graph._pendingJobs.indexOf(job), -1);
    t.falsy(job.isValid);
});
ava_1.default('.pruneDisconnected should prune all nodes that are not connected to an entry', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(() => { }, {
        initialState: utils_1.createNodesFromNotation(`
      a -> b
      c -> b
      d
    `)
    });
    graph.addEntryPoint('a');
    graph.pruneDisconnected();
    t.deepEqual(Array.from(graph._prunedNodes), ['c', 'd']);
});
ava_1.default('.pruneDisconnected should prune all nodes if there is no entry', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(() => { }, {
        initialState: utils_1.createNodesFromNotation(`
      a -> b
      c -> b
      d
    `)
    });
    graph.pruneDisconnected();
    t.deepEqual(Array.from(graph._prunedNodes), ['a', 'b', 'c', 'd']);
});
ava_1.default('.addEntryPoint should allow nodes to be denoted as entry nodes', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(() => { });
    graph.addEntryPoint('a');
    t.deepEqual(Array.from(graph.entryPoints), ['a']);
});
ava_1.default('.pruneDisconnected should handle cyclic graphs 1', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(() => { }, {
        initialState: utils_1.createNodesFromNotation(`
      a -> b -> c -> b
    `)
    });
    graph.prune('a');
    graph.pruneDisconnected();
    t.truthy(imm.is(graph.nodes, imm.Map()));
});
ava_1.default('.pruneDisconnected should handle cyclic graphs 2', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(() => { }, {
        initialState: utils_1.createNodesFromNotation(`
      a -> b -> c -> d -> b
    `)
    });
    graph.prune('a');
    graph.pruneDisconnected();
    t.truthy(imm.is(graph.nodes, imm.Map()));
});
ava_1.default('.pruneDisconnected should handle cyclic graphs 3', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(() => { }, {
        initialState: utils_1.createNodesFromNotation(`
      a -> b -> c -> d -> b
      c -> b
    `)
    });
    graph.prune('a');
    graph.pruneDisconnected();
    t.truthy(imm.is(graph.nodes, imm.Map()));
});
ava_1.default('.pruneDisconnected should handle cyclic graphs 4', (t) => {
    const graph = new graph_1.CyclicDependencyGraph(() => { }, {
        initialState: utils_1.createNodesFromNotation(`
      a -> b -> c -> d -> b
      c -> b
    `)
    });
    graph.addEntryPoint('a');
    graph.prune('b');
    graph.pruneDisconnected();
    t.truthy(imm.is(graph.nodes, imm.Map({ a: imm.Map({ id: 'a', dependencies: imm.Set(), dependents: imm.Set() }) })));
});
ava_1.default('.pruneDisconnected should successfully prune a graph representing a tournament', (t) => {
    // https://en.wikipedia.org/wiki/Tournament_(graph_theory)
    const tournament = utils_1.createNodesFromNotation(`
    a -> b -> a 
    a -> c -> a
    a -> d -> a
    b -> c -> b
    b -> d -> b
    c -> d -> c
  `);
    const graph = new graph_1.CyclicDependencyGraph(() => { }, {
        initialState: tournament
    });
    t.truthy(imm.is(graph.nodes, tournament));
    graph.addEntryPoint('a');
    graph.prune('a');
    graph.pruneDisconnected();
    t.truthy(imm.is(graph.nodes, imm.Map()));
});
//# sourceMappingURL=data:application/json;base64,